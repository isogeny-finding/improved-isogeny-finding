load("coron_trivariate.sage")
load("bj07_trivariate.sage")

P.<x1,x2,x3,x4> = PolynomialRing(ZZ)

# p = prime
# Q = quadratic form
# e = exponent up to which it works
# c = comment to be printed
forms = [
    {
        "p": 2^250 * 68 - 1,
        "Q": 686442941929602247684916825264373807198905712405575*x1^2 + 90933685657062310791353747454269887573715547798780*x1*x2 - 369664486654778318000839527703132903995544258064301*x1*x3 + 1858674664088238422626145381355717991239155366667499*x2^2 + 1418992414662076971496186081644656502536477077390578*x2*x3 + 3301134022240419033259924716602499513057158197970966*x3^2,
        "e": 20,
        "c": "generated prime. Coron works up to 19, ratio 0.80. BJ works up to 20, ratio 0.825.",
    },
    {
        "p": 2^216 * 3^137 - 1,
        "Q": 370291985544173585270042095507821685716657495644844548095464576612810941699691115078490*x1^2 + 368710254101385679027086223990218817782762062160643972754868098606616581249516956383341*x1*x2 - 202756729933606392976384781544773256836177295755265835343081361051183153444827682560788*x1*x3 + 572749400944643243347153039146292898044167814363117660643792534924682181571026914567701*x2^2 + 54561033104305367396806742918555148826492028420543346858129099176296322052934803668120*x2*x3 + 878748782849557682087191825048558794670018934888093220755298418530605235156318356312367*x3^2,
        "e": 35,
        "c": "p = SIKEp434. Coron works up to 29, ratio 0.80. BJ07 works up to 35, ratio 0.827.",
    },
    {
        "p": 2^305 * 3^192 - 1,
        "Q": 61246090618426567295080359073692516144153536908164326904386679874516652631208308460715021436790929843626924666021631219770*x1^2 + 48696985927345285832623153770221502560532232184836048283758483917086585048824277569535006023248344807150637214467951020868*x1*x2 - 31153376691296769761254150740974250866302157733779036964409602446308277311104326979435529175583183553962293284996450288087*x1*x3 + 143916858246091136679850931281189582393160250030910915389987582418497329781148245134800990466481969310026749080450478059791*x2^2 - 10955502427808172025048463179418732172434254490059024211636455380702491893586871607260838071863932225979628354686644116896*x2*x3 + 215727566420873958630575745738980064416544558378862674263898727334494288634190835684939049872496062309952546384368212544064*x3^2,
        "e": 50,
        "c": "p = SIKEp610. Coron works up to 41, even 42 half the time, ratio 0.81. BJ07 works up to 50, ratio 0.827 (once 0.829, probably outlier",
    },
]

REPEAT_TEST = 5

for form in forms:
    p_bits = form["p"].bit_length()
    Q = form["Q"]
    comment = form["c"]
    e = form["e"]
    # set to something large to find e
    if e is None:
        e = 100
    # loop to e, and one more just to check it really isn't working
    for i in range(floor(e*0.7), e+1+1):
        for j in range(REPEAT_TEST):
            x0 = randint(2^(i-5), 2^i)
            y0 = randint(2^(i-5), 2^i)
            z0 = randint(2^(i-5), 2^i)
            f = Q - Q(x0, y0, z0, 0)
            degree_bits = Q(x0, y0, z0, 0).bit_length()
            # NOTE: bound is set depending on the exponent
            b = 2^(i+1)
            print("======================================")
            print(comment)
            print("Exp:", i, "Iter:", j, "Root: (", x0, y0, z0, ")", "Degree:", Q(x0,y0,z0,0).bit_length(), "Ratio:", degree_bits / p_bits)
            roots_coron, _ = coron_trivariate(f, b, b, b, l=0, debug=False)
            roots_bj07 = bj07_trivariate(f, b, b, b, opts={"debug":False, "returnFirst": True, "solution": None, "S": "predef2"})
            print("Coron roots:", roots_coron)
            print("BJ07  roots:", roots_bj07)

